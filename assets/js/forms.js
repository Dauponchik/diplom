/**
 * –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º —Å–∞–π—Ç—É Nissan
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ AJAX –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
 */

class FormHandler {
    constructor() {
        this.init();
    }

    init() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ñ–æ—Ä–º
        this.initTestDriveForm();
        this.initSubscribeForm();
        this.initContactForm();
        this.initServiceForm();
        this.initTradeinForm();
        
        // –î–æ–¥–∞—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        this.setupFormValidation();
    }

    // –§–æ—Ä–º–∞ –∑–∞–ø–∏—Å—É –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤
    initTestDriveForm() {
        const testDriveForm = document.getElementById('testdrive-form');
        if (testDriveForm) {
            testDriveForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                await this.handleTestDriveSubmit(testDriveForm);
                return false;
            });

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–∞—Ç—É
            const dateInput = testDriveForm.querySelector('input[name="date"]');
            if (dateInput) {
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                dateInput.min = tomorrow.toISOString().split('T')[0];
                
                const maxDate = new Date();
                maxDate.setMonth(maxDate.getMonth() + 3);
                dateInput.max = maxDate.toISOString().split('T')[0];
            }
        }
    }

    // –§–æ—Ä–º–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–∏–Ω–∏
    initSubscribeForm() {
        const subscribeForms = document.querySelectorAll('.subscribe-form, .subscribe-form-large');
        subscribeForms.forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                await this.handleSubscribeSubmit(form);
                return false;
            });
        });
    }

    // –§–æ—Ä–º–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    initContactForm() {
        const contactForms = document.querySelectorAll('.contact-form');
        console.log('üîç –ü–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö —Ñ–æ—Ä–º:', contactForms.length);
        contactForms.forEach((contactForm, index) => {
            console.log(`‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —Ñ–æ—Ä–º–∞ ${index + 1} –∑–Ω–∞–π–¥–µ–Ω–∞, –¥–æ–¥–∞—é –æ–±—Ä–æ–±–Ω–∏–∫`);
            contactForm.addEventListener('submit', async (e) => {
                console.log(`‚ö° –°–ø—Ä–∞—Ü—é–≤–∞–ª–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏ ${index + 1}`);
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
                
                // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
                if (e.defaultPrevented) {
                    console.log('‚úÖ Default behavior prevented');
                }
                
                await this.handleContactSubmit(contactForm);
                return false;
            }, true); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ capture phase
        });
        
        if (contactForms.length === 0) {
            console.log('‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ —Ñ–æ—Ä–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ');
        }
    }

    // –§–æ—Ä–º–∞ –∑–∞–ø–∏—Å—É –Ω–∞ —Å–µ—Ä–≤—ñ—Å
    initServiceForm() {
        const serviceForm = document.querySelector('.service-form');
        if (serviceForm) {
            serviceForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                await this.handleServiceSubmit(serviceForm);
                return false;
            });

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–∞—Ç—É –¥–ª—è —Å–µ—Ä–≤—ñ—Å—É
            const dateInput = serviceForm.querySelector('input[name="service-date"]');
            if (dateInput) {
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                dateInput.min = tomorrow.toISOString().split('T')[0];
                
                const maxDate = new Date();
                maxDate.setMonth(maxDate.getMonth() + 3);
                dateInput.max = maxDate.toISOString().split('T')[0];
            }
        }
    }

    // –§–æ—Ä–º–∞ trade-in
    initTradeinForm() {
        const tradeinForm = document.querySelector('.tradein-form');
        if (tradeinForm) {
            tradeinForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                await this.handleTradeinSubmit(tradeinForm);
                return false;
            });

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–∫ –¥–ª—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
            const yearInput = tradeinForm.querySelector('input[name="car-year"]');
            if (yearInput) {
                yearInput.max = new Date().getFullYear();
            }
        }
    }

    // –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤—É
    async handleTestDriveSubmit(form) {
        const formData = new FormData(form);
        const submitBtn = form.querySelector('button[type="submit"]');
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if (!this.validateTestDriveForm(form)) {
            return false;
        }

        try {
            this.setLoading(submitBtn, true);
            
            const response = await fetch('php/testdrive.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —É—Å–ø—ñ—Ö—É
                this.showSuccessModal('–¢–µ—Å—Ç-–¥—Ä–∞–π–≤ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ!', result.message);
                form.reset();
                
                // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤—É
                const testDriveModal = document.getElementById('testDriveModal');
                if (testDriveModal) {
                    testDriveModal.style.display = 'none';
                    document.body.style.overflow = 'auto';
                }
            } else {
                this.showError(result.message, result.errors);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        } finally {
            this.setLoading(submitBtn, false);
        }
        
        return false; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É submit
    }

    // –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
    async handleSubscribeSubmit(form) {
        const formData = new FormData(form);
        const submitBtn = form.querySelector('button[type="submit"]');
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
        const emailInput = form.querySelector('input[name="email"]');
        if (!this.validateEmail(emailInput.value)) {
            this.showFieldError(emailInput, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É');
            return false;
        }

        try {
            this.setLoading(submitBtn, true);
            
            const response = await fetch('php/subscribe.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showSuccess(result.message);
                form.reset();
            } else {
                this.showError(result.message, result.errors);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        } finally {
            this.setLoading(submitBtn, false);
        }
        
        return false; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É submit
    }

    // –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    async handleContactSubmit(form) {
        console.log('üìã –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏');
        const formData = new FormData(form);
        const submitBtn = form.querySelector('button[type="submit"]');
        
        console.log('üîÑ –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤\'—è–∑–∫—É...');
        console.log('üìù –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏:', Object.fromEntries(formData.entries()));
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if (!this.validateContactForm(form)) {
            console.log('‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
            return false;
        }

        try {
            this.setLoading(submitBtn, true);
            
            console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ AJAX –∑–∞–ø–∏—Ç—É –¥–æ contact.php...');
            
            const response = await fetch('php/contact.php', {
                method: 'POST',
                body: formData
            });
            
            console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response.status, response.statusText);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            
            if (result.success) {
                console.log('‚úÖ –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞!');
                // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —É—Å–ø—ñ—Ö—É —è–∫ —É —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤—É
                this.showSuccessModal('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!', result.message);
                form.reset();
            } else {
                console.log('‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞:', result.errors);
                this.showError(result.message, result.errors);
            }
        } catch (error) {
            console.error('üí• –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        } finally {
            this.setLoading(submitBtn, false);
        }
        
        console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏');
        return false; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É submit
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤—É
    validateTestDriveForm(form) {
        let isValid = true;
        
        const carModel = form.querySelector('[name="car_model"]');
        const name = form.querySelector('[name="name"]');
        const phone = form.querySelector('[name="phone"]');
        const date = form.querySelector('[name="date"]');
        
        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        this.clearFieldErrors(form);
        
        if (!carModel.value) {
            this.showFieldError(carModel, '–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è');
            isValid = false;
        }
        
        if (!name.value || name.value.length < 2) {
            this.showFieldError(name, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏)');
            isValid = false;
        }
        
        if (!this.validatePhone(phone.value)) {
            this.showFieldError(phone, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É');
            isValid = false;
        }
        
        if (!date.value) {
            this.showFieldError(date, '–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤—É');
            isValid = false;
        } else {
            const selectedDate = new Date(date.value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (selectedDate <= today) {
                this.showFieldError(date, '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∏–Ω—É–ª–æ–º—É');
                isValid = false;
            }
        }
        
        return isValid;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    validateContactForm(form) {
        let isValid = true;
        
        const name = form.querySelector('[name="name"]');
        const phone = form.querySelector('[name="phone"]');
        const email = form.querySelector('[name="email"]');
        const message = form.querySelector('[name="message"]');
        const privacy = form.querySelector('[name="privacy"]');
        
        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        this.clearFieldErrors(form);
        
        if (!name.value || name.value.length < 2) {
            this.showFieldError(name, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏)');
            isValid = false;
        }
        
        if (!this.validatePhone(phone.value)) {
            this.showFieldError(phone, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É');
            isValid = false;
        }
        
        if (!this.validateEmail(email.value)) {
            this.showFieldError(email, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É');
            isValid = false;
        }
        
        if (!message.value || message.value.length < 10) {
            this.showFieldError(message, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤');
            isValid = false;
        }
        
        if (!privacy.checked) {
            this.showFieldError(privacy, '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ');
            isValid = false;
        }
        
        return isValid;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
    validateEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    validatePhone(phone) {
        const phoneRegex = /^[\+]?[0-9\(\)\-\s]{10,}$/;
        return phoneRegex.test(phone);
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –ø–æ–ª—è
    showFieldError(field, message) {
        field.classList.add('error');
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –ø–æ–º–∏–ª–∫—É
        const existingError = field.parentNode.querySelector('.field-error');
        if (existingError) {
            existingError.remove();
        }
        
        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –ø–æ–º–∏–ª–∫—É
        const errorDiv = document.createElement('div');
        errorDiv.className = 'field-error';
        errorDiv.textContent = message;
        field.parentNode.appendChild(errorDiv);
    }

    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø–æ–ª—ñ–≤
    clearFieldErrors(form) {
        const errorFields = form.querySelectorAll('.error');
        const errorMessages = form.querySelectorAll('.field-error');
        
        errorFields.forEach(field => field.classList.remove('error'));
        errorMessages.forEach(error => error.remove());
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É
    showError(message, errors = []) {
        // –Ø–∫—â–æ —Ü–µ –º–∞—Å–∏–≤ –ø–æ–º–∏–ª–æ–∫, –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ–∂–Ω—É –æ–∫—Ä–µ–º–æ
        if (errors && errors.length > 0) {
            errors.forEach(error => {
                this.showNotification(error, 'error');
            });
        } else {
            // –Ü–Ω–∞–∫—à–µ –ø–æ–∫–∞–∑—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            this.showNotification(message, 'error');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å–ø—ñ—Ö
    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    showNotification(message, type = 'info') {
        console.log(`üì¢ –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${type} - ${message}`);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        let container = document.querySelector('.notifications-container');
        if (!container) {
            container = document.createElement('div');
            container.className = 'notifications-container';
            document.body.appendChild(container);
            console.log('üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å');
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        
        // –ó–∞–º—ñ–Ω—é—î–º–æ \n –Ω–∞ <br> –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        const formattedMessage = message.replace(/\n/g, '<br>');
        
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                <span>${formattedMessage}</span>
            </div>
            <button class="notification-close">&times;</button>
        `;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è
        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.remove();
        });

        // –î–æ–¥–∞—î–º–æ –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }

    // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —É—Å–ø—ñ—Ö—É
    showSuccessModal(title, message) {
        console.log(`üéâ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞: ${title}`);
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —è–∫—â–æ —î
        let modal = document.querySelector('.success-modal');
        if (modal) {
            console.log('üóëÔ∏è –í–∏–¥–∞–ª—è—é –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ');
            modal.remove();
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        modal = document.createElement('div');
        modal.className = 'success-modal';
        modal.style.display = 'block'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–¥—Ä–∞–∑—É
        modal.innerHTML = `
            <div class="modal-overlay">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">${title}</h3>
                        <button class="modal-close" type="button">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="success-icon">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <p class="modal-message">${message}</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary modal-ok" type="button">OK</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ DOM');

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó
        setTimeout(() => {
            modal.style.display = 'flex';
            document.body.classList.add('modal-open');
            document.body.style.overflow = 'hidden';
            console.log('üì∫ –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ');
        }, 10);

        // –§—É–Ω–∫—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        const closeModal = () => {
            console.log('‚ùå –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞');
            modal.style.display = 'none';
            document.body.classList.remove('modal-open');
            document.body.style.overflow = 'auto';
            if (modal.parentNode) {
                modal.remove();
            }
        };

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
        const closeBtn = modal.querySelector('.modal-close');
        const okBtn = modal.querySelector('.modal-ok');
        const overlay = modal.querySelector('.modal-overlay');

        if (closeBtn) {
            closeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                closeModal();
            });
        }

        if (okBtn) {
            okBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                closeModal();
            });
        }

        if (overlay) {
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    e.preventDefault();
                    e.stopPropagation();
                    closeModal();
                }
            });
        }

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –Ω–∞ ESC
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                e.preventDefault();
                closeModal();
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);
        
        console.log('üéØ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ');
    }

    // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    setLoading(button, isLoading) {
        if (isLoading) {
            button.disabled = true;
            button.dataset.originalText = button.textContent;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –í—ñ–¥–ø—Ä–∞–≤–∫–∞...';
        } else {
            button.disabled = false;
            button.textContent = button.dataset.originalText || button.textContent;
        }
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    setupFormValidation() {
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ –¥–ª—è email –ø–æ–ª—ñ–≤
        const emailInputs = document.querySelectorAll('input[type="email"]');
        emailInputs.forEach(input => {
            input.addEventListener('blur', () => {
                if (input.value && !this.validateEmail(input.value)) {
                    this.showFieldError(input, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É');
                } else {
                    this.clearFieldError(input);
                }
            });
        });

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –ø–æ–ª—ñ–≤
        const phoneInputs = document.querySelectorAll('input[type="tel"], input[name="phone"]');
        phoneInputs.forEach(input => {
            input.addEventListener('blur', () => {
                if (input.value && !this.validatePhone(input.value)) {
                    this.showFieldError(input, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É');
                } else {
                    this.clearFieldError(input);
                }
            });
        });
    }

    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è
    clearFieldError(field) {
        field.classList.remove('error');
        const errorMessage = field.parentNode.querySelector('.field-error');
        if (errorMessage) {
            errorMessage.remove();
        }
    }

    // –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ —Å–µ—Ä–≤—ñ—Å—É
    async handleServiceSubmit(form) {
        const formData = new FormData(form);
        const submitBtn = form.querySelector('button[type="submit"]');
        
        console.log('üîß –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –∑–∞–ø–∏—Å—É –Ω–∞ —Å–µ—Ä–≤—ñ—Å...');
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if (!this.validateServiceForm(form)) {
            console.log('‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å–Ω–æ—ó —Ñ–æ—Ä–º–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
            return false;
        }

        try {
            this.setLoading(submitBtn, true);
            
            console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ service.php...');
            
            const response = await fetch('php/service.php', {
                method: 'POST',
                body: formData
            });
            
            console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Ä–≤—ñ—Å—É:', result);
            
            if (result.success) {
                this.showSuccess(result.message);
                form.reset();
                
                // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –≤–µ—Ä—Ö—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            } else {
                console.log('‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—É:', result.errors);
                this.showError(result.message, result.errors);
            }
        } catch (error) {
            console.error('üí• –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä–≤—ñ—Å–Ω–æ—ó —Ñ–æ—Ä–º–∏:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        } finally {
            this.setLoading(submitBtn, false);
        }
        
        return false; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É submit
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ —Å–µ—Ä–≤—ñ—Å—É
    validateServiceForm(form) {
        let isValid = true;
        
        const clientName = form.querySelector('[name="client-name"]');
        const clientPhone = form.querySelector('[name="client-phone"]');
        const carModel = form.querySelector('[name="car-model"]');
        const serviceType = form.querySelector('[name="service-type"]');
        const serviceDate = form.querySelector('[name="service-date"]');
        const privacy = form.querySelector('[name="privacy"]');
        
        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        this.clearFieldErrors(form);
        
        if (!clientName.value || clientName.value.length < 2) {
            this.showFieldError(clientName, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏)');
            isValid = false;
        }
        
        if (!this.validatePhone(clientPhone.value)) {
            this.showFieldError(clientPhone, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É');
            isValid = false;
        }
        
        if (!carModel.value) {
            this.showFieldError(carModel, '–í–≤–µ–¥—ñ—Ç—å –º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è');
            isValid = false;
        }
        
        if (!serviceType.value) {
            this.showFieldError(serviceType, '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–µ—Ä–≤—ñ—Å—É');
            isValid = false;
        }
        
        if (!serviceDate.value) {
            this.showFieldError(serviceDate, '–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Å–µ—Ä–≤—ñ—Å—É');
            isValid = false;
        } else {
            const selectedDate = new Date(serviceDate.value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (selectedDate <= today) {
                this.showFieldError(serviceDate, '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∏–Ω—É–ª–æ–º—É');
                isValid = false;
            }
        }
        
        if (!privacy.checked) {
            this.showFieldError(privacy, '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ');
            isValid = false;
        }
        
        return isValid;
    }

    // –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ trade-in
    async handleTradeinSubmit(form) {
        const formData = new FormData(form);
        const submitBtn = form.querySelector('button[type="submit"]');
        
        console.log('üîÑ –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ trade-in...');
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if (!this.validateTradeinForm(form)) {
            console.log('‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è trade-in —Ñ–æ—Ä–º–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
            return false;
        }

        try {
            this.setLoading(submitBtn, true);
            
            console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ tradein.php...');
            
            const response = await fetch('php/tradein.php', {
                method: 'POST',
                body: formData
            });
            
            console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç trade-in:', result);
            
            if (result.success) {
                this.showSuccess(result.message);
                form.reset();
                
                // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –≤–µ—Ä—Ö—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            } else {
                console.log('‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó trade-in:', result.errors);
                this.showError(result.message, result.errors);
            }
        } catch (error) {
            console.error('üí• –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ trade-in —Ñ–æ—Ä–º–∏:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        } finally {
            this.setLoading(submitBtn, false);
        }
        
        return false; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É submit
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ trade-in
    validateTradeinForm(form) {
        let isValid = true;
        
        const ownerName = form.querySelector('[name="owner-name"]');
        const ownerPhone = form.querySelector('[name="owner-phone"]');
        const carBrand = form.querySelector('[name="car-brand"]');
        const carModel = form.querySelector('[name="car-model"]');
        const carYear = form.querySelector('[name="car-year"]');
        const carMileage = form.querySelector('[name="car-mileage"]');
        const carEngine = form.querySelector('[name="car-engine"]');
        const carFuel = form.querySelector('[name="car-fuel"]');
        const carCondition = form.querySelector('[name="car-condition"]');
        const privacy = form.querySelector('[name="privacy"]');
        
        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        this.clearFieldErrors(form);
        
        if (!ownerName.value || ownerName.value.length < 2) {
            this.showFieldError(ownerName, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏)');
            isValid = false;
        }
        
        if (!this.validatePhone(ownerPhone.value)) {
            this.showFieldError(ownerPhone, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É');
            isValid = false;
        }
        
        if (!carBrand.value) {
            this.showFieldError(carBrand, '–í–≤–µ–¥—ñ—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è');
            isValid = false;
        }
        
        if (!carModel.value) {
            this.showFieldError(carModel, '–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è');
            isValid = false;
        }
        
        if (!carYear.value || carYear.value < 1950 || carYear.value > new Date().getFullYear()) {
            this.showFieldError(carYear, `–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä—ñ–∫ (1950-${new Date().getFullYear()})`);
            isValid = false;
        }
        
        if (!carMileage.value || carMileage.value < 0) {
            this.showFieldError(carMileage, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø—Ä–æ–±—ñ–≥');
            isValid = false;
        }
        
        if (!carEngine.value) {
            this.showFieldError(carEngine, '–í–≤–µ–¥—ñ—Ç—å –æ–±\'—î–º –¥–≤–∏–≥—É–Ω–∞');
            isValid = false;
        }
        
        if (!carFuel.value) {
            this.showFieldError(carFuel, '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–∞–ª–∏–≤–∞');
            isValid = false;
        }
        
        if (!carCondition.value) {
            this.showFieldError(carCondition, '–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–∞–Ω –∞–≤—Ç–æ–º–æ–±—ñ–ª—è');
            isValid = false;
        }
        
        if (!privacy.checked) {
            this.showFieldError(privacy, '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ');
            isValid = false;
        }
        
        return isValid;
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FormHandler...');
    const handler = new FormHandler();
    window.FormHandler = FormHandler; // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    console.log('‚úÖ FormHandler —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–æ—Ä–º
    setTimeout(() => {
        const contactForms = document.querySelectorAll('.contact-form');
        const serviceForms = document.querySelectorAll('.service-form');
        const tradeinForms = document.querySelectorAll('.tradein-form');
        const testdriveForms = document.querySelectorAll('#testdrive-form, .testdrive-form');
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ñ–æ—Ä–º:');
        console.log('üìù –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ —Ñ–æ—Ä–º–∏:', contactForms.length);
        console.log('üîß –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ñ–æ—Ä–º–∏:', serviceForms.length);
        console.log('üöó Trade-in —Ñ–æ—Ä–º–∏:', tradeinForms.length);
        console.log('üèéÔ∏è –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ —Ñ–æ—Ä–º–∏:', testdriveForms.length);
    }, 100);
}); 